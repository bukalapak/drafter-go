name: Release
on:
  push:
    tags:
      - '*'
jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
      - run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
      - uses: actions/upload-artifact@v2
        with:
          name: release_url
          path: release_url.txt
  publish:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: '1.15.2'
      - uses: actions/setup-python@v2
        with:
          python-version: '2.x'
      - uses: actions/download-artifact@v2
        with:
          name: release_url
          path: .
      - run: make submodules
      - run: make drafter
      - run: make plugin
      - run: make rpc-plugin
      - id: get_upload_url
        run: echo ::set-output name=upload_url::$(cat release_url.txt)
      - id: get_version
        run: echo ::set-output name=version::$(echo ${{ github.ref }} | cut -d / -f 3 | tail -c +2)
      - id: get_os_name
        run: echo ::set-output name=os::$(echo ${{ runner.os }} | sed 's/macOS/Darwin/' | tr '[:upper:]' '[:lower:]')
      - id: get_formatted_name
        run: echo ::set-output name=name::$(echo ${{ steps.get_version.outputs.version }}-${{ steps.get_os_name.outputs.os }})
      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_upload_url.outputs.upload_url }}
          asset_path: ./drafter.so
          asset_name: drafter-${{ steps.get_formatted_name.outputs.name }}.so
          asset_content_type: application/octet-stream
      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_upload_url.outputs.upload_url }}
          asset_path: ./drafter-rpc
          asset_name: drafter-rpc-${{ steps.get_formatted_name.outputs.name }}
          asset_content_type: application/octet-stream
  publish-musl:
    name: publish (musl)
    runs-on: ubuntu-latest
    container:
      image: golang:1.15.2-alpine
    steps:
      - run: apk add --update build-base python2 git
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: release_url
          path: .
      - run: make submodules
      - run: make drafter
      - run: make plugin
      - run: make rpc-plugin
      - id: get_upload_url
        run: echo ::set-output name=upload_url::$(cat release_url.txt)
      - id: get_version
        run: echo ::set-output name=version::$(echo ${{ github.ref }} | cut -d / -f 3 | tail -c +2)
      - id: get_formatted_name
        run: echo ::set-output name=name::$(echo ${{ steps.get_version.outputs.version }}-linux-musl)
      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_upload_url.outputs.upload_url }}
          asset_path: ./drafter.so
          asset_name: drafter-${{ steps.get_formatted_name.outputs.name }}.so
          asset_content_type: application/octet-stream
      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_upload_url.outputs.upload_url }}
          asset_path: ./drafter-rpc
          asset_name: drafter-rpc-${{ steps.get_formatted_name.outputs.name }}
          asset_content_type: application/octet-stream
